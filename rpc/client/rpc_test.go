package client_test

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/binary"
	"fmt"
	"math"
	"net/http"
	"strings"
	"sync"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	abci "github.com/cometbft/cometbft/abci/types"
	cmtjson "github.com/cometbft/cometbft/libs/json"
	"github.com/cometbft/cometbft/libs/log"
	cmtmath "github.com/cometbft/cometbft/libs/math"
	mempl "github.com/cometbft/cometbft/mempool"
	"github.com/cometbft/cometbft/rpc/client"
	rpchttp "github.com/cometbft/cometbft/rpc/client/http"
	rpclocal "github.com/cometbft/cometbft/rpc/client/local"
	ctypes "github.com/cometbft/cometbft/rpc/core/types"
	rpcclient "github.com/cometbft/cometbft/rpc/jsonrpc/client"
	rpctest "github.com/cometbft/cometbft/rpc/test"
	"github.com/cometbft/cometbft/types"
)

var (
	ctx = context.Background()
)

func getHTTPClient() *rpchttp.HTTP {
	rpcAddr := rpctest.GetConfig().RPC.ListenAddress
	c, err := rpchttp.New(rpcAddr, "/websocket")
	if err != nil {
		panic(err)
	}
	c.SetLogger(log.TestingLogger())
	return c
}

func getHTTPClientWithTimeout(timeout uint) *rpchttp.HTTP {
	rpcAddr := rpctest.GetConfig().RPC.ListenAddress
	c, err := rpchttp.NewWithTimeout(rpcAddr, "/websocket", timeout)
	if err != nil {
		panic(err)
	}
	c.SetLogger(log.TestingLogger())
	return c
}

func getLocalClient() *rpclocal.Local {
	return rpclocal.New(node)
}

// GetClients returns a slice of clients for table-driven tests
func GetClients() []client.Client {
	return []client.Client{
		getHTTPClient(),
		getLocalClient(),
	}
}

func getzhongjian(str, start, end string) string { //xiugai
	n := strings.Index(str, start)
	if n == -1 {
		return ""
	}
	n += len(start)
	str = string([]byte(str)[n:])
	m := strings.Index(str, end)
	if m == -1 {
		return ""
	}
	str = string([]byte(str)[:m])
	if len(str) <= 0 { //个别交易段注意
		return ""
	}
	return str
}

var fenjie = []byte{10, 161, 1, 10, 32, 47, 99, 111, 115, 109, 111, 115, 46, 97, 117, 116, 104, 46, 118, 49, 98, 101, 116, 97, 49, 46, 66, 97, 115, 101, 65, 99, 99, 111, 117, 110, 116, 18, 125, 10, 45, 109, 97, 110, 116, 114, 97, 49, 116, 120, 116, 122, 106, 113, 116, 109, 103, 119, 106, 104, 103, 107, 100, 118, 119, 116, 100, 103, 102, 119, 104, 115, 100, 97, 55, 55, 101, 119, 104, 120, 103, 113, 112, 116, 100, 51, 18, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117, 98, 75, 101, 121, 18, 35, 10, 33, 2, 72, 102, 168, 193, 122, 141, 188, 135, 217, 218, 46, 137, 224, 141, 213, 245, 228, 177, 154, 204, 144, 14, 236, 44, 6, 250, 142, 245, 109, 126, 51, 200, 24, 203, 254, 3, 32, 2}

func IntToBytes(n int) []byte {
	// 创建一个字节缓冲区
	byteBuffer := new(bytes.Buffer)

	// 将整型转换为int64类型，以适应不同大小的整型
	var num int64 = int64(n)

	// 使用binary.Write将int64类型的数据以二进制形式写入字节缓冲区
	err := binary.Write(byteBuffer, binary.BigEndian, num)
	if err != nil {
		fmt.Println("binary.Write failed:", err)
		return nil
	}

	// 返回字节缓冲区的字节数组
	return byteBuffer.Bytes()
}

func int32ToBytes(i int32) []byte {
	bytes := make([]byte, 4)
	binary.LittleEndian.PutUint32(bytes, uint32(i))
	return bytes
}

func int64ToBytes(i int64) []byte {
	bytes := make([]byte, 8)
	binary.LittleEndian.PutUint64(bytes, uint64(i))
	return bytes
}
func IntToBytesBigEndian(n int64, bytesLength byte) ([]byte, error) {
	switch bytesLength {
	case 1:
		tmp := int8(n)
		bytesBuffer := bytes.NewBuffer([]byte{})
		binary.Write(bytesBuffer, binary.BigEndian, &tmp)
		return bytesBuffer.Bytes(), nil
	case 2:
		tmp := int16(n)
		bytesBuffer := bytes.NewBuffer([]byte{})
		binary.Write(bytesBuffer, binary.BigEndian, &tmp)
		return bytesBuffer.Bytes(), nil
	case 3:
		tmp := int32(n)
		bytesBuffer := bytes.NewBuffer([]byte{})
		binary.Write(bytesBuffer, binary.BigEndian, &tmp)
		return bytesBuffer.Bytes()[1:], nil
	case 4:
		tmp := int32(n)
		bytesBuffer := bytes.NewBuffer([]byte{})
		binary.Write(bytesBuffer, binary.BigEndian, &tmp)
		return bytesBuffer.Bytes(), nil
	case 5:
		tmp := n
		bytesBuffer := bytes.NewBuffer([]byte{})
		binary.Write(bytesBuffer, binary.BigEndian, &tmp)
		return bytesBuffer.Bytes()[3:], nil
	case 6:
		tmp := n
		bytesBuffer := bytes.NewBuffer([]byte{})
		binary.Write(bytesBuffer, binary.BigEndian, &tmp)
		return bytesBuffer.Bytes()[2:], nil
	case 7:
		tmp := n
		bytesBuffer := bytes.NewBuffer([]byte{})
		binary.Write(bytesBuffer, binary.BigEndian, &tmp)
		return bytesBuffer.Bytes()[1:], nil
	case 8:
		tmp := n
		bytesBuffer := bytes.NewBuffer([]byte{})
		binary.Write(bytesBuffer, binary.BigEndian, &tmp)
		return bytesBuffer.Bytes(), nil
	}
	return nil, fmt.Errorf("IntToBytesBigEndian b param is invaild")
}

func TestMy(t *testing.T) {
	num := uint16(601)
	buf := make([]byte, 8)
	binary.BigEndian.PutUint16(buf, num)
	fmt.Println(buf)
	fmt.Println(IntToBytesBigEndian(601, 3))
	fmt.Println(IntToBytesBigEndian(601, 5))
	fmt.Println(IntToBytes(601))
	fmt.Println(int32ToBytes(601))
	fmt.Println(int64ToBytes(58883))

	fmt.Println(string(fenjie))

	fmt.Println(fmt.Sprintf("正确读取合约 om:[%06f] usdc:[%06f]", float64(float64(123456789)/1000000.0), float64(float64(23456788)/1000000.0)))

	//linTxt := "{\"pool_info\":{\"pool_identifier\":\"o.uom.uusdc\",\"asset_denoms\":[\"uom\",\"ibc/65D0BEC6DAD96C7F5043D1E54E54B6BB5D5B3AEC3FF6CEBB75B9E059F3580EA3\"],\"lp_denom\":\"factory/mantra1466nf3zuxpya8q9emxukd7vftaf6h4psr0a07srl5zw74zh84yjqagspfm/o.uom.uusdc.LP\",\"asset_decimals\":[6,6],\"assets\":[{\"denom\":\"uom\",\"amount\":\"121164454070\"},{\"denom\":\"ibc/65D0BEC6DAD96C7F5043D1E54E54B6BB5D5B3AEC3FF6CEBB75B9E059F3580EA3\",\"amount\":\"460498437328\"}],\"pool_type\":\"constant_product\",\"pool_fees\":{\"protocol_fee\":{\"share\":\"0\"},\"swap_fee\":{\"share\":\"0.002\"},\"burn_fee\":{\"share\":\"0\"},\"extra_fees\":[]}},\"total_share\":{\"denom\":\"factory/mantra1466nf3zuxpya8q9emxukd7vftaf6h4psr0a07srl5zw74zh84yjqagspfm/o.uom.uusdc.LP\",\"amount\":\"235117979647\"}}"
	//
	//Uom := getzhongjian("uom\",\"amount\":\"", "\"}", linTxt)

	//om, err := strconv.ParseInt(Uom, 10, 64)
	//if err == nil {
	//	Uusdc := getzhongjian("580EA3\",\"amount\":\"", "\"}", linTxt)
	//	fmt.Println(linTxt, Uusdc)
	//	usdc, err := strconv.ParseInt(Uusdc, 10, 64)
	//
	//	if err == nil {
	//		fmt.Println(fmt.Sprintf("正确读取合约 om%06f usdc%06f", float64(om/1000000), float64(usdc/1000000)))
	//
	//	}
	//}

	fmt.Println(string(QuerSmall))
	fmt.Println(len(QuerSmall))
	fmt.Println([]byte("mantra1466nf3zuxpya8q9emxukd7vftaf6h4psr0a07srl5zw74zh84yjqagspfm"))
	fmt.Println(len([]byte("mantra1466nf3zuxpya8q9emxukd7vftaf6h4psr0a07srl5zw74zh84yjqagspfm")))
	fmt.Println([]byte("{\"pools\": {\"pool_identifier\": \"o.uom.uusdc\"}}"))
	fmt.Println(len([]byte("{\"pools\": {\"pool_identifier\": \"o.uom.uusdc\"}}")))
	//PanDuanAstro2(lin)
}

var QuerSmall = []byte{10, 65, 109, 97, 110, 116, 114, 97, 49, 52, 54, 54, 110, 102, 51, 122, 117, 120, 112, 121, 97, 56, 113, 57, 101, 109, 120, 117, 107, 100, 55, 118, 102, 116, 97, 102, 54, 104, 52, 112, 115, 114, 48, 97, 48, 55, 115, 114, 108, 53, 122, 119, 55, 52, 122, 104, 56, 52, 121, 106, 113, 97, 103, 115, 112, 102, 109, 18, 45, 123, 34, 112, 111, 111, 108, 115, 34, 58, 32, 123, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 32, 34, 111, 46, 117, 111, 109, 46, 117, 117, 115, 100, 99, 34, 125, 125}

// var QuerSmall = []byte{10, 64, 116, 101, 114, 114, 97, 49, 119, 56, 102, 55, 50, 57, 48, 117, 115, 113, 54, 52, 107, 110, 55, 108, 101, 114, 115, 55, 100, 106, 119, 118, 50, 112, 53, 117, 122, 112, 103, 54, 54, 115, 48, 120, 115, 55, 100, 57, 110, 54, 112, 106, 120, 112, 120, 118, 114, 120, 116, 113, 104, 120, 121, 109, 115, 56, 18, 14, 123, 34, 120, 105, 110, 95, 120, 105, 34, 58, 32, 123, 125, 125}
// @terra1w8f7290usq64kn7lers7djwv2p5uzpg66s0xs7d9n6pjxpxvrxtqhxyms8{"xin_xi": {}}
var tUluna = []byte{10, 5, 117, 108, 117, 110, 97, 18}
var tUusdc = []byte{10, 68, 105, 98, 99, 47, 66, 51, 53, 48, 52, 69, 48, 57, 50, 52, 53, 54, 66, 65, 54, 49, 56, 67, 67, 50, 56, 65, 67, 54, 55, 49, 65, 55, 49, 70, 66, 48, 56, 67, 54, 67, 65, 48, 70, 68, 48, 66, 69, 55, 67, 56, 65, 53, 66, 53, 65, 51, 69, 50, 68, 68, 57, 51, 51, 67, 67, 57, 69, 52, 18}

var MsgAAA = []byte("/cosmwasm.wasm.v1.MsgExecuteContract")

// https://finder.terra.money/mainnet/tx/6323CE2AD6B636FC77D55CDDB111B068755C461C37F9E855A13B9A10942DBC96
// https://finder.terra.money/mainnet/tx/62d26fdb249310d0a956494b9f7dca936fbe80b79515bbda4a98e21e43a6cbe0
var ChiZi = []byte("mantra1466nf3zuxpya8q9emxukd7vftaf6h4psr0a07srl5zw74zh84yjqagspfm")

//流动性 可以不识别
//https://finder.terra.money/mainnet/tx/050074d6457c03e39b4a78ab63d109cfc77185510653d917a9b624bfa5500b9d
//var MsgDD = []byte("terra1erm54gtdtfqv2s4c7ple3kmret7eecuj02nk5w8h08jjnenjffzsynsp0u")

var ByteUluna = []byte("\"denom\":\"uluna\"")
var ByteUusdc = []byte("\"denom\":\"ibc/B3504E092456BA618CC28AC671A71FB08C6CA0FD0BE7C8A5B5A3E2DD933CC9E4\"")

//var minLen = 999
//var youxiaoMax = 0
//var youxiaoMin = 9999

var ByteUomUsdc = []byte("\"ask_asset_denom\":\"ibc/65D0BEC6DAD96C7F5043D1E54E54B6BB5D5B3AEC3FF6CEBB75B9E059F3580EA3\"")
var ByteUsdcUom = []byte("\"ask_asset_denom\":\"uom\"")

//var lin = []byte{10, 202, 2, 10, 199, 2, 10, 36, 47, 99, 111, 115, 109, 119, 97, 115, 109, 46, 119, 97, 115, 109, 46, 118, 49, 46, 77, 115, 103, 69, 120, 101, 99, 117, 116, 101, 67, 111, 110, 116, 114, 97, 99, 116, 18, 158, 2, 10, 45, 109, 97, 110, 116, 114, 97, 49, 108, 119, 100, 52, 48, 57, 51, 97, 109, 54, 110, 114, 99, 48, 121, 53, 48, 57, 55, 116, 52, 102, 54, 103, 108, 117, 103, 100, 54, 121, 115, 120, 53, 99, 120, 110, 101, 104, 18, 65, 109, 97, 110, 116, 114, 97, 49, 52, 54, 54, 110, 102, 51, 122, 117, 120, 112, 121, 97, 56, 113, 57, 101, 109, 120, 117, 107, 100, 55, 118, 102, 116, 97, 102, 54, 104, 52, 112, 115, 114, 48, 97, 48, 55, 115, 114, 108, 53, 122, 119, 55, 52, 122, 104, 56, 52, 121, 106, 113, 97, 103, 115, 112, 102, 109, 26, 152, 1, 123, 34, 115, 119, 97, 112, 34, 58, 123, 34, 97, 115, 107, 95, 97, 115, 115, 101, 116, 95, 100, 101, 110, 111, 109, 34, 58, 34, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 34, 44, 34, 109, 97, 120, 95, 115, 112, 114, 101, 97, 100, 34, 58, 34, 48, 46, 48, 48, 53, 34, 44, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 34, 111, 46, 117, 111, 109, 46, 117, 117, 115, 100, 99, 34, 125, 125, 42, 15, 10, 3, 117, 111, 109, 18, 8, 55, 51, 48, 48, 48, 48, 48, 48, 18, 101, 10, 80, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117, 98, 75, 101, 121, 18, 35, 10, 33, 2, 119, 50, 134, 255, 73, 38, 253, 135, 187, 7, 231, 224, 200, 188, 227, 132, 17, 172, 14, 245, 101, 188, 44, 219, 75, 248, 133, 14, 57, 105, 0, 5, 18, 4, 10, 2, 8, 127, 24, 2, 18, 17, 10, 11, 10, 3, 117, 111, 109, 18, 4, 53, 53, 49, 52, 16, 183, 133, 28, 26, 64, 133, 34, 132, 53, 184, 90, 61, 248, 215, 223, 103, 126, 193, 61, 70, 136, 95, 85, 87, 105, 92, 218, 221, 62, 242, 105, 156, 158, 185, 125, 222, 198, 119, 20, 65, 76, 240, 28, 43, 150, 193, 235, 44, 63, 166, 176, 83, 181, 194, 77, 171, 203, 0, 32, 240, 102, 230, 101, 179, 181, 209, 106, 37, 84}

//var lin = []byte{10, 200, 2, 10, 197, 2, 10, 36, 47, 99, 111, 115, 109, 119, 97, 115, 109, 46, 119, 97, 115, 109, 46, 118, 49, 46, 77, 115, 103, 69, 120, 101, 99, 117, 116, 101, 67, 111, 110, 116, 114, 97, 99, 116, 18, 156, 2, 10, 45, 109, 97, 110, 116, 114, 97, 49, 108, 113, 50, 117, 116, 55, 97, 48, 114, 120, 57, 112, 55, 101, 55, 119, 109, 114, 52, 100, 102, 104, 102, 103, 122, 113, 112, 100, 119, 101, 57, 103, 109, 97, 100, 103, 55, 121, 18, 65, 109, 97, 110, 116, 114, 97, 49, 52, 54, 54, 110, 102, 51, 122, 117, 120, 112, 121, 97, 56, 113, 57, 101, 109, 120, 117, 107, 100, 55, 118, 102, 116, 97, 102, 54, 104, 52, 112, 115, 114, 48, 97, 48, 55, 115, 114, 108, 53, 122, 119, 55, 52, 122, 104, 56, 52, 121, 106, 113, 97, 103, 115, 112, 102, 109, 26, 150, 1, 123, 34, 115, 119, 97, 112, 34, 58, 123, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 34, 111, 46, 117, 111, 109, 46, 117, 117, 115, 100, 99, 34, 44, 34, 97, 115, 107, 95, 97, 115, 115, 101, 116, 95, 100, 101, 110, 111, 109, 34, 58, 34, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 34, 44, 34, 109, 97, 120, 95, 115, 112, 114, 101, 97, 100, 34, 58, 34, 48, 46, 49, 34, 125, 125, 42, 15, 10, 3, 117, 111, 109, 18, 8, 50, 53, 49, 55, 50, 52, 51, 57, 18, 102, 10, 81, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117, 98, 75, 101, 121, 18, 35, 10, 33, 2, 249, 207, 32, 181, 45, 193, 76, 172, 115, 235, 89, 74, 130, 203, 237, 246, 143, 158, 134, 251, 137, 158, 81, 149, 126, 192, 170, 246, 81, 62, 89, 61, 18, 4, 10, 2, 8, 1, 24, 205, 63, 18, 17, 10, 11, 10, 3, 117, 111, 109, 18, 4, 51, 57, 51, 57, 16, 252, 132, 24, 26, 64, 203, 150, 25, 25, 102, 213, 191, 3, 226, 130, 95, 98, 1, 227, 149, 40, 133, 221, 55, 211, 114, 155, 11, 9, 175, 149, 16, 122, 89, 55, 56, 172, 120, 99, 14, 41, 220, 43, 146, 68, 210, 98, 115, 217, 27, 251, 120, 179, 120, 43, 177, 194, 217, 116, 168, 30, 177, 52, 98, 174, 152, 141, 183, 45}

//var lin = []byte{10, 199, 2, 10, 196, 2, 10, 36, 47, 99, 111, 115, 109, 119, 97, 115, 109, 46, 119, 97, 115, 109, 46, 118, 49, 46, 77, 115, 103, 69, 120, 101, 99, 117, 116, 101, 67, 111, 110, 116, 114, 97, 99, 116, 18, 155, 2, 10, 45, 109, 97, 110, 116, 114, 97, 49, 55, 53, 50, 54, 115, 101, 120, 103, 110, 55, 104, 52, 50, 103, 48, 122, 57, 50, 108, 99, 103, 104, 119, 114, 99, 52, 109, 120, 121, 121, 103, 108, 48, 113, 48, 107, 55, 115, 18, 65, 109, 97, 110, 116, 114, 97, 49, 52, 54, 54, 110, 102, 51, 122, 117, 120, 112, 121, 97, 56, 113, 57, 101, 109, 120, 117, 107, 100, 55, 118, 102, 116, 97, 102, 54, 104, 52, 112, 115, 114, 48, 97, 48, 55, 115, 114, 108, 53, 122, 119, 55, 52, 122, 104, 56, 52, 121, 106, 113, 97, 103, 115, 112, 102, 109, 26, 152, 1, 123, 34, 115, 119, 97, 112, 34, 58, 123, 34, 97, 115, 107, 95, 97, 115, 115, 101, 116, 95, 100, 101, 110, 111, 109, 34, 58, 34, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 34, 44, 34, 109, 97, 120, 95, 115, 112, 114, 101, 97, 100, 34, 58, 34, 48, 46, 48, 48, 53, 34, 44, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 34, 111, 46, 117, 111, 109, 46, 117, 117, 115, 100, 99, 34, 125, 125, 42, 12, 10, 3, 117, 111, 109, 18, 5, 53, 48, 48, 48, 48, 18, 101, 10, 80, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117, 98, 75, 101, 121, 18, 35, 10, 33, 3, 222, 207, 127, 223, 36, 142, 51, 27, 170, 160, 131, 57, 201, 211, 0, 220, 228, 254, 88, 230, 108, 82, 139, 244, 169, 109, 250, 92, 189, 67, 230, 234, 18, 4, 10, 2, 8, 127, 24, 5, 18, 17, 10, 11, 10, 3, 117, 111, 109, 18, 4, 52, 53, 56, 56, 16, 169, 128, 28, 26, 64, 40, 152, 164, 215, 186, 126, 188, 223, 66, 89, 39, 167, 10, 85, 138, 129, 186, 94, 27, 59, 23, 206, 225, 101, 146, 232, 182, 193, 30, 71, 141, 229, 85, 143, 129, 129, 105, 237, 222, 56, 179, 159, 151, 94, 112, 1, 184, 244, 65, 228, 103, 235, 119, 236, 101, 238, 225, 115, 58, 106, 108, 102, 191, 3}

//var lin = []byte{10, 202, 2, 10, 199, 2, 10, 36, 47, 99, 111, 115, 109, 119, 97, 115, 109, 46, 119, 97, 115, 109, 46, 118, 49, 46, 77, 115, 103, 69, 120, 101, 99, 117, 116, 101, 67, 111, 110, 116, 114, 97, 99, 116, 18, 158, 2, 10, 45, 109, 97, 110, 116, 114, 97, 49, 114, 113, 108, 110, 101, 51, 100, 117, 104, 101, 50, 52, 101, 102, 108, 51, 120, 109, 108, 117, 122, 121, 104, 54, 108, 53, 107, 52, 57, 116, 55, 55, 110, 110, 122, 119, 57, 99, 18, 65, 109, 97, 110, 116, 114, 97, 49, 52, 54, 54, 110, 102, 51, 122, 117, 120, 112, 121, 97, 56, 113, 57, 101, 109, 120, 117, 107, 100, 55, 118, 102, 116, 97, 102, 54, 104, 52, 112, 115, 114, 48, 97, 48, 55, 115, 114, 108, 53, 122, 119, 55, 52, 122, 104, 56, 52, 121, 106, 113, 97, 103, 115, 112, 102, 109, 26, 87, 123, 34, 115, 119, 97, 112, 34, 58, 123, 34, 97, 115, 107, 95, 97, 115, 115, 101, 116, 95, 100, 101, 110, 111, 109, 34, 58, 34, 117, 111, 109, 34, 44, 34, 109, 97, 120, 95, 115, 112, 114, 101, 97, 100, 34, 58, 34, 48, 46, 48, 48, 53, 34, 44, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 34, 111, 46, 117, 111, 109, 46, 117, 117, 115, 100, 99, 34, 125, 125, 42, 81, 10, 68, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 18, 9, 52, 48, 51, 50, 53, 57, 48, 56, 51, 18, 101, 10, 80, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117, 98, 75, 101, 121, 18, 35, 10, 33, 3, 140, 157, 191, 89, 14, 236, 85, 209, 108, 80, 192, 32, 250, 135, 15, 111, 60, 251, 239, 150, 105, 105, 130, 167, 15, 62, 130, 218, 232, 180, 171, 191, 18, 4, 10, 2, 8, 1, 24, 42, 18, 17, 10, 11, 10, 3, 117, 111, 109, 18, 4, 55, 48, 48, 48, 16, 224, 220, 42, 26, 64, 183, 17, 27, 185, 222, 66, 81, 23, 100, 167, 8, 175, 255, 4, 238, 107, 143, 135, 0, 61, 38, 73, 236, 119, 115, 115, 169, 235, 53, 76, 147, 227, 110, 6, 70, 99, 201, 229, 16, 69, 252, 160, 160, 155, 249, 37, 150, 168, 208, 19, 0, 86, 208, 129, 140, 83, 159, 22, 234, 183, 217, 149, 247, 164}

var lin = []byte{10, 254, 6, 10, 251, 6, 10, 36, 47, 99, 111, 115, 109, 119, 97, 115, 109, 46, 119, 97, 115, 109, 46, 118, 49, 46, 77, 115, 103, 69, 120, 101, 99, 117, 116, 101, 67, 111, 110, 116, 114, 97, 99, 116, 18, 210, 6, 10, 45, 109, 97, 110, 116, 114, 97, 49, 106, 55, 52, 52, 102, 52, 100, 50, 110, 120, 48, 107, 54, 103, 115, 107, 51, 107, 103, 54, 107, 51, 100, 122, 57, 106, 54, 55, 120, 115, 110, 115, 110, 99, 97, 53, 55, 115, 18, 65, 109, 97, 110, 116, 114, 97, 49, 52, 54, 54, 110, 102, 51, 122, 117, 120, 112, 121, 97, 56, 113, 57, 101, 109, 120, 117, 107, 100, 55, 118, 102, 116, 97, 102, 54, 104, 52, 112, 115, 114, 48, 97, 48, 55, 115, 114, 108, 53, 122, 119, 55, 52, 122, 104, 56, 52, 121, 106, 113, 97, 103, 115, 112, 102, 109, 26, 138, 5, 123, 34, 101, 120, 101, 99, 117, 116, 101, 95, 115, 119, 97, 112, 95, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 34, 58, 123, 34, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 34, 58, 91, 123, 34, 109, 97, 110, 116, 114, 97, 95, 115, 119, 97, 112, 34, 58, 123, 34, 116, 111, 107, 101, 110, 95, 105, 110, 95, 100, 101, 110, 111, 109, 34, 58, 34, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 34, 44, 34, 116, 111, 107, 101, 110, 95, 111, 117, 116, 95, 100, 101, 110, 111, 109, 34, 58, 34, 117, 111, 109, 34, 44, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 34, 111, 46, 117, 111, 109, 46, 117, 117, 115, 100, 99, 34, 125, 125, 44, 123, 34, 109, 97, 110, 116, 114, 97, 95, 115, 119, 97, 112, 34, 58, 123, 34, 116, 111, 107, 101, 110, 95, 105, 110, 95, 100, 101, 110, 111, 109, 34, 58, 34, 117, 111, 109, 34, 44, 34, 116, 111, 107, 101, 110, 95, 111, 117, 116, 95, 100, 101, 110, 111, 109, 34, 58, 34, 105, 98, 99, 47, 54, 55, 52, 57, 68, 49, 54, 66, 67, 48, 57, 70, 52, 49, 57, 67, 48, 57, 48, 67, 51, 51, 48, 70, 67, 55, 53, 49, 70, 70, 70, 49, 67, 57, 54, 49, 52, 51, 68, 66, 55, 65, 52, 68, 50, 70, 67, 65, 69, 67, 50, 70, 51, 52, 56, 65, 51, 69, 49, 55, 54, 49, 56, 65, 34, 44, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 34, 111, 46, 117, 111, 109, 46, 97, 117, 115, 100, 121, 34, 125, 125, 44, 123, 34, 109, 97, 110, 116, 114, 97, 95, 115, 119, 97, 112, 34, 58, 123, 34, 116, 111, 107, 101, 110, 95, 105, 110, 95, 100, 101, 110, 111, 109, 34, 58, 34, 105, 98, 99, 47, 54, 55, 52, 57, 68, 49, 54, 66, 67, 48, 57, 70, 52, 49, 57, 67, 48, 57, 48, 67, 51, 51, 48, 70, 67, 55, 53, 49, 70, 70, 70, 49, 67, 57, 54, 49, 52, 51, 68, 66, 55, 65, 52, 68, 50, 70, 67, 65, 69, 67, 50, 70, 51, 52, 56, 65, 51, 69, 49, 55, 54, 49, 56, 65, 34, 44, 34, 116, 111, 107, 101, 110, 95, 111, 117, 116, 95, 100, 101, 110, 111, 109, 34, 58, 34, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 34, 44, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 34, 111, 46, 97, 117, 115, 100, 121, 46, 117, 117, 115, 100, 99, 46, 120, 121, 107, 34, 125, 125, 93, 44, 34, 109, 105, 110, 105, 109, 117, 109, 95, 114, 101, 99, 101, 105, 118, 101, 34, 58, 34, 51, 48, 51, 57, 57, 56, 52, 48, 48, 34, 44, 34, 109, 97, 120, 95, 115, 112, 114, 101, 97, 100, 34, 58, 34, 48, 46, 49, 34, 125, 125, 42, 81, 10, 68, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 18, 9, 51, 48, 51, 57, 57, 56, 52, 48, 48, 18, 101, 10, 80, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117, 98, 75, 101, 121, 18, 35, 10, 33, 2, 65, 185, 211, 59, 47, 134, 100, 164, 155, 253, 113, 0, 176, 223, 146, 155, 40, 98, 104, 92, 209, 33, 163, 168, 201, 138, 183, 91, 83, 223, 31, 82, 18, 4, 10, 2, 8, 1, 24, 113, 18, 17, 10, 11, 10, 3, 117, 111, 109, 18, 4, 53, 56, 53, 56, 16, 149, 224, 35, 26, 64, 165, 225, 134, 43, 249, 101, 117, 148, 47, 108, 97, 191, 254, 94, 152, 19, 32, 107, 96, 170, 225, 29, 241, 89, 124, 193, 191, 155, 43, 91, 62, 125, 25, 118, 249, 6, 255, 191, 69, 221, 250, 2, 211, 79, 150, 232, 134, 106, 108, 208, 71, 34, 97, 226, 76, 143, 123, 168, 79, 176, 159, 60, 251, 176}

//var lin = []byte{10, 151, 5, 10, 191, 3, 10, 36, 47, 99, 111, 115, 109, 119, 97, 115, 109, 46, 119, 97, 115, 109, 46, 118, 49, 46, 77, 115, 103, 69, 120, 101, 99, 117, 116, 101, 67, 111, 110, 116, 114, 97, 99, 116, 18, 150, 3, 10, 45, 109, 97, 110, 116, 114, 97, 49, 106, 51, 50, 48, 112, 109, 106, 114, 52, 109, 115, 57, 106, 53, 101, 109, 106, 101, 119, 110, 55, 57, 106, 110, 48, 51, 121, 97, 100, 114, 106, 107, 108, 100, 100, 121, 53, 108, 18, 65, 109, 97, 110, 116, 114, 97, 49, 52, 104, 106, 50, 116, 97, 118, 113, 56, 102, 112, 101, 115, 100, 119, 120, 120, 99, 117, 52, 52, 114, 116, 121, 51, 104, 104, 57, 48, 118, 104, 117, 106, 114, 118, 99, 109, 115, 116, 108, 52, 122, 114, 51, 116, 120, 109, 102, 118, 119, 57, 115, 116, 53, 117, 120, 103, 99, 26, 161, 2, 123, 34, 97, 100, 100, 95, 101, 110, 116, 114, 121, 34, 58, 123, 34, 100, 97, 116, 97, 34, 58, 123, 34, 98, 97, 108, 97, 110, 99, 101, 34, 58, 34, 49, 53, 51, 50, 48, 49, 51, 49, 50, 51, 57, 49, 55, 34, 44, 34, 98, 108, 111, 99, 107, 34, 58, 34, 50, 49, 52, 51, 53, 48, 50, 51, 34, 44, 34, 115, 101, 110, 100, 95, 97, 109, 111, 117, 110, 116, 34, 58, 34, 50, 54, 51, 55, 48, 52, 53, 34, 44, 34, 116, 120, 95, 111, 114, 105, 103, 105, 110, 34, 58, 34, 48, 120, 97, 102, 48, 54, 98, 50, 54, 56, 52, 54, 50, 49, 54, 99, 57, 102, 57, 57, 56, 52, 55, 98, 51, 99, 101, 53, 52, 52, 51, 100, 51, 56, 48, 48, 50, 50, 57, 55, 49, 98, 34, 44, 34, 116, 120, 95, 114, 101, 99, 105, 112, 105, 101, 110, 116, 34, 58, 34, 109, 97, 110, 116, 114, 97, 49, 56, 97, 102, 113, 108, 122, 120, 48, 121, 115, 109, 114, 108, 99, 116, 54, 119, 52, 109, 121, 104, 119, 100, 103, 101, 53, 112, 114, 110, 120, 104, 117, 50, 101, 97, 53, 103, 113, 34, 44, 34, 116, 120, 105, 100, 34, 58, 34, 48, 120, 100, 98, 97, 55, 54, 98, 57, 53, 97, 56, 50, 97, 56, 51, 48, 101, 52, 54, 54, 49, 100, 50, 101, 50, 97, 100, 52, 101, 52, 57, 100, 55, 53, 56, 54, 51, 56, 100, 48, 51, 99, 48, 48, 51, 54, 50, 101, 48, 102, 101, 101, 99, 52, 54, 56, 49, 101, 101, 52, 53, 55, 98, 54, 53, 34, 125, 125, 125, 10, 142, 1, 10, 28, 47, 99, 111, 115, 109, 111, 115, 46, 98, 97, 110, 107, 46, 118, 49, 98, 101, 116, 97, 49, 46, 77, 115, 103, 83, 101, 110, 100, 18, 110, 10, 45, 109, 97, 110, 116, 114, 97, 49, 106, 51, 50, 48, 112, 109, 106, 114, 52, 109, 115, 57, 106, 53, 101, 109, 106, 101, 119, 110, 55, 57, 106, 110, 48, 51, 121, 97, 100, 114, 106, 107, 108, 100, 100, 121, 53, 108, 18, 45, 109, 97, 110, 116, 114, 97, 49, 56, 97, 102, 113, 108, 122, 120, 48, 121, 115, 109, 114, 108, 99, 116, 54, 119, 52, 109, 121, 104, 119, 100, 103, 101, 53, 112, 114, 110, 120, 104, 117, 50, 101, 97, 53, 103, 113, 26, 14, 10, 3, 117, 111, 109, 18, 7, 50, 54, 51, 55, 48, 52, 53, 18, 66, 48, 120, 100, 98, 97, 55, 54, 98, 57, 53, 97, 56, 50, 97, 56, 51, 48, 101, 52, 54, 54, 49, 100, 50, 101, 50, 97, 100, 52, 101, 52, 57, 100, 55, 53, 56, 54, 51, 56, 100, 48, 51, 99, 48, 48, 51, 54, 50, 101, 48, 102, 101, 101, 99, 52, 54, 56, 49, 101, 101, 52, 53, 55, 98, 54, 53, 18, 103, 10, 82, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117, 98, 75, 101, 121, 18, 35, 10, 33, 2, 190, 250, 103, 86, 114, 155, 162, 239, 224, 211, 145, 53, 75, 114, 40, 129, 198, 183, 30, 130, 193, 2, 80, 204, 134, 222, 142, 194, 85, 202, 209, 75, 18, 4, 10, 2, 8, 1, 24, 246, 202, 3, 18, 17, 10, 11, 10, 3, 117, 111, 109, 18, 4, 52, 50, 53, 57, 16, 147, 255, 25, 26, 64, 245, 166, 21, 231, 141, 180, 30, 191, 203, 203, 26, 15, 117, 203, 54, 207, 62, 86, 195, 245, 27, 175, 231, 132, 220, 97, 244, 175, 207, 163, 243, 58, 123, 15, 248, 130, 58, 174, 54, 132, 169, 120, 236, 80, 83, 167, 193, 63, 59, 30, 111, 157, 193, 109, 152, 248, 50, 93, 55, 89, 209, 121, 198, 159}

//var lin = []byte{10, 203, 4, 10, 178, 4, 10, 36, 47, 99, 111, 115, 109, 119, 97, 115, 109, 46, 119, 97, 115, 109, 46, 118, 49, 46, 77, 115, 103, 69, 120, 101, 99, 117, 116, 101, 67, 111, 110, 116, 114, 97, 99, 116, 18, 137, 4, 10, 45, 109, 97, 110, 116, 114, 97, 49, 119, 52, 57, 102, 48, 107, 110, 115, 51, 120, 53, 107, 101, 115, 102, 56, 56, 107, 102, 57, 50, 55, 113, 121, 118, 120, 51, 55, 99, 113, 120, 55, 119, 109, 53, 56, 121, 51, 18, 65, 109, 97, 110, 116, 114, 97, 49, 52, 54, 54, 110, 102, 51, 122, 117, 120, 112, 121, 97, 56, 113, 57, 101, 109, 120, 117, 107, 100, 55, 118, 102, 116, 97, 102, 54, 104, 52, 112, 115, 114, 48, 97, 48, 55, 115, 114, 108, 53, 122, 119, 55, 52, 122, 104, 56, 52, 121, 106, 113, 97, 103, 115, 112, 102, 109, 26, 193, 2, 123, 34, 101, 120, 101, 99, 117, 116, 101, 95, 115, 119, 97, 112, 95, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 34, 58, 123, 34, 109, 105, 110, 105, 109, 117, 109, 95, 114, 101, 99, 101, 105, 118, 101, 34, 58, 34, 50, 51, 56, 49, 54, 48, 48, 48, 34, 44, 34, 109, 97, 120, 95, 115, 112, 114, 101, 97, 100, 34, 58, 34, 48, 46, 49, 34, 44, 34, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 34, 58, 91, 123, 34, 109, 97, 110, 116, 114, 97, 95, 115, 119, 97, 112, 34, 58, 123, 34, 116, 111, 107, 101, 110, 95, 105, 110, 95, 100, 101, 110, 111, 109, 34, 58, 34, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 34, 44, 34, 116, 111, 107, 101, 110, 95, 111, 117, 116, 95, 100, 101, 110, 111, 109, 34, 58, 34, 105, 98, 99, 47, 65, 52, 68, 66, 52, 55, 65, 57, 68, 51, 67, 70, 57, 65, 48, 54, 56, 68, 52, 53, 52, 53, 49, 51, 56, 57, 49, 66, 53, 50, 54, 55, 48, 50, 52, 53, 53, 68, 51, 69, 70, 48, 56, 70, 66, 57, 69, 66, 53, 53, 56, 67, 53, 54, 49, 70, 57, 68, 67, 50, 66, 55, 48, 49, 34, 44, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 34, 111, 46, 117, 97, 116, 111, 109, 46, 117, 117, 115, 100, 99, 34, 125, 125, 93, 125, 125, 42, 81, 10, 68, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 18, 9, 49, 54, 49, 57, 48, 48, 48, 48, 48, 18, 20, 52, 45, 109, 97, 110, 116, 66, 111, 116, 45, 50, 48, 50, 52, 45, 49, 50, 45, 50, 48, 18, 102, 10, 81, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117, 98, 75, 101, 121, 18, 35, 10, 33, 2, 84, 149, 149, 62, 229, 212, 133, 93, 184, 122, 67, 18, 91, 151, 77, 93, 83, 28, 224, 31, 91, 166, 2, 36, 231, 54, 226, 189, 42, 187, 245, 170, 18, 4, 10, 2, 8, 1, 24, 194, 45, 18, 17, 10, 11, 10, 3, 117, 111, 109, 18, 4, 53, 49, 56, 55, 16, 209, 211, 31, 26, 64, 249, 73, 55, 137, 43, 138, 44, 182, 10, 126, 128, 174, 222, 222, 203, 45, 210, 115, 128, 44, 183, 243, 191, 91, 107, 69, 78, 95, 161, 206, 255, 203, 37, 6, 185, 32, 239, 231, 125, 129, 11, 85, 240, 198, 12, 47, 139, 186, 48, 125, 9, 96, 17, 213, 185, 252, 140, 251, 242, 68, 81, 72, 24, 114}

// var lin = []byte{10, 139, 3, 10, 136, 3, 10, 36, 47, 99, 111, 115, 109, 119, 97, 115, 109, 46, 119, 97, 115, 109, 46, 118, 49, 46, 77, 115, 103, 69, 120, 101, 99, 117, 116, 101, 67, 111, 110, 116, 114, 97, 99, 116, 18, 223, 2, 10, 45, 109, 97, 110, 116, 114, 97, 49, 53, 122, 117, 54, 55, 104, 109, 118, 113, 54, 119, 104, 109, 112, 55, 122, 54, 110, 97, 101, 114, 119, 57, 117, 57, 101, 109, 51, 120, 52, 102, 115, 101, 120, 115, 116, 100, 119, 18, 65, 109, 97, 110, 116, 114, 97, 49, 52, 54, 54, 110, 102, 51, 122, 117, 120, 112, 121, 97, 56, 113, 57, 101, 109, 120, 117, 107, 100, 55, 118, 102, 116, 97, 102, 54, 104, 52, 112, 115, 114, 48, 97, 48, 55, 115, 114, 108, 53, 122, 119, 55, 52, 122, 104, 56, 52, 121, 106, 113, 97, 103, 115, 112, 102, 109, 26, 61, 123, 34, 112, 114, 111, 118, 105, 100, 101, 95, 108, 105, 113, 117, 105, 100, 105, 116, 121, 34, 58, 123, 34, 112, 111, 111, 108, 95, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 34, 58, 34, 111, 46, 97, 117, 115, 100, 121, 46, 117, 117, 115, 100, 99, 46, 120, 121, 107, 34, 125, 125, 42, 79, 10, 68, 105, 98, 99, 47, 54, 53, 68, 48, 66, 69, 67, 54, 68, 65, 68, 57, 54, 67, 55, 70, 53, 48, 52, 51, 68, 49, 69, 53, 52, 69, 53, 52, 66, 54, 66, 66, 53, 68, 53, 66, 51, 65, 69, 67, 51, 70, 70, 54, 67, 69, 66, 66, 55, 53, 66, 57, 69, 48, 53, 57, 70, 51, 53, 56, 48, 69, 65, 51, 18, 7, 49, 57, 55, 53, 57, 48, 48, 42, 91, 10, 68, 105, 98, 99, 47, 54, 55, 52, 57, 68, 49, 54, 66, 67, 48, 57, 70, 52, 49, 57, 67, 48, 57, 48, 67, 51, 51, 48, 70, 67, 55, 53, 49, 70, 70, 70, 49, 67, 57, 54, 49, 52, 51, 68, 66, 55, 65, 52, 68, 50, 70, 67, 65, 69, 67, 50, 70, 51, 52, 56, 65, 51, 69, 49, 55, 54, 49, 56, 65, 18, 19, 49, 56, 53, 52, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 18, 101, 10, 80, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117, 98, 75, 101, 121, 18, 35, 10, 33, 3, 117, 241, 224, 52, 230, 20, 96, 201, 246, 115, 122, 230, 211, 18, 18, 93, 208, 187, 51, 51, 189, 255, 149, 56, 108, 156, 122, 49, 61, 140, 255, 102, 18, 4, 10, 2, 8, 127, 24, 44, 18, 17, 10, 11, 10, 3, 117, 111, 109, 18, 4, 54, 57, 57, 55, 16, 147, 203, 35, 26, 64, 93, 15, 25, 154, 251, 154, 195, 137, 230, 52, 207, 134, 127, 222, 121, 126, 30, 245, 244, 194, 63, 32, 129, 62, 129, 16, 114, 162, 204, 43, 77, 139, 33, 200, 224, 208, 198, 246, 125, 176, 30, 20, 143, 202, 179, 112, 71, 110, 174, 58, 45, 77, 190, 42, 68, 192, 235, 124, 233, 218, 186, 18, 118, 213}
var ChiZiTxt = "mantra1466nf3zuxpya8q9emxukd7vftaf6h4psr0a07srl5zw74zh84yjqagspfm"

func FenJie(txString []byte) string {
	//[]byte{10,202,2,10,199,2,10,36,47,99,111,115,109,119,97,115,109,46,119,97,115,109,46,118,49,46,77,115,103,69,120,101,99,117,116,101,67,111,110,116,114,97,99,116,18,158,2,10,45,109,97,110,116,114,97,49,108,119,100,52,48,57,51,97,109,54,110,114,99,48,121,53,48,57,55,116,52,102,54,103,108,117,103,100,54,121,115,120,53,99,120,110,101,104,18,65,109,97,110,116,114,97,49,52,54,54,110,102,51,122,117,120,112,121,97,56,113,57,101,109,120,117,107,100,55,118,102,116,97,102,54,104,52,112,115,114,48,97,48,55,115,114,108,53,122,119,55,52,122,104,56,52,121,106,113,97,103,115,112,102,109,26,152,1,123,34,115,119,97,112,34,58,123,34,97,115,107,95,97,115,115,101,116,95,100,101,110,111,109,34,58,34,105,98,99,47,54,53,68,48,66,69,67,54,68,65,68,57,54,67,55,70,53,48,52,51,68,49,69,53,52,69,53,52,66,54,66,66,53,68,53,66,51,65,69,67,51,70,70,54,67,69,66,66,55,53,66,57,69,48,53,57,70,51,53,56,48,69,65,51,34,44,34,109,97,120,95,115,112,114,101,97,100,34,58,34,48,46,48,48,53,34,44,34,112,111,111,108,95,105,100,101,110,116,105,102,105,101,114,34,58,34,111,46,117,111,109,46,117,117,115,100,99,34,125,125,42,15,10,3,117,111,109,18,8,55,51,48,48,48,48,48,48,18,101,10,80,10,70,10,31,47,99,111,115,109,111,115,46,99,114,121,112,116,111,46,115,101,99,112,50,53,54,107,49,46,80,117,98,75,101,121,18,35,10,33,2,119,50,134,255,73,38,253,135,187,7,231,224,200,188,227,132,17,172,14,245,101,188,44,219,75,248,133,14,57,105,0,5,18,4,10,2,8,127,24,2,18,17,10,11,10,3,117,111,109,18,4,53,53,49,52,16,183,133,28,26,64,133,34,132,53,184,90,61,248,215,223,103,126,193,61,70,136,95,85,87,105,92,218,221,62,242,105,156,158,185,125,222,198,119,20,65,76,240,28,43,150,193,235,44,63,166,176,83,181,194,77,171,203,0,32,240,102,230,101,179,181,209,106,37,84}
	qi := 3                                                                            //10,202,2,
	yiCeng := (int(txString[qi-1 : qi][0])-1)*128 + int(txString[qi-2 : qi-1][0]) + qi //带上车头qi
	qi += 3                                                                            // 10,199,2,
	qi += 2                                                                            //10,36,
	nnn := int(txString[qi-1 : qi][0])                                                 ///cosmwasm.wasm.v1.MsgExecuteContract
	fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	qi += nnn                                                                           //a
	qi += 3                                                                             //18,158,2,
	sanCeng := (int(txString[qi-1 : qi][0])-1)*128 + int(txString[qi-2 : qi-1][0]) + qi //带上车头qi

	qi += 2                           //10,45,
	nnn = int(txString[qi-1 : qi][0]) //mantra1lwd4093am6nrc0y5097t4f6glugd6ysx5cxneh
	fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	qi += nnn                         //a
	qi += 2                           //18,65,
	nnn = int(txString[qi-1 : qi][0]) //mantra1466nf3zuxpya8q9emxukd7vftaf6h4psr0a07srl5zw74zh84yjqagspfm
	fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	if ChiZiTxt != string(txString[qi:qi+nnn]) {
		fmt.Println("别的池子")
		return "别的池子"
	}
	qi += nnn //a
	//看长短 短的是一位 长的两位
	if int(txString[qi+2 : qi+3][0]) == 123 {
		qi += 2                           //26,87
		nnn = int(txString[qi-1 : qi][0]) //{"swap":{"ask_asset_denom":"uom","max_spread":"0.005","pool_identifier":"o.uom.uusdc"}}
	} else if int(txString[qi+3 : qi+4][0]) == 123 {
		qi += 3 //26,152,1,
		//138,5 = 650   128*4+138  并非*256 真实*128
		nnn = (int(txString[qi-1 : qi][0])-1)*128 + int(txString[qi-2 : qi-1][0]) //{"swap":{"ask_asset_denom":"ibc/65D0BEC6DAD96C7F5043D1E54E54B6BB5D5B3AEC3FF6CEBB75B9E059F3580EA3","max_spread":"0.005","pool_identifier":"o.uom.uusdc"}}
	} else {
		ShuChu(txString)
		fmt.Println("错误解析")
		return "错误解析"
	}
	fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	qi += nnn //a
	//fmt.Println("后边", txString[qi:qi+10], "后边")
	qi += 2                           //42,15,
	qi += 2                           //10,3,|10,68,
	nnn = int(txString[qi-1 : qi][0]) //uom|ibc/65D0BEC6DAD96C7F5043D1E54E54B6BB5D5B3AEC3FF6CEBB75B9E059F3580EA3
	fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	qi += nnn                         //a
	qi += 2                           //18,8,
	nnn = int(txString[qi-1 : qi][0]) //73000000
	fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	qi += nnn //a

	//流动provide_liquidity
	if sanCeng > qi+2 && int(txString[qi : qi+1][0]) == 42 { //至少多个42,91,
		qi += 2 //多42,91,
		qi += 2 //多10,68
		nnn = int(txString[qi-1 : qi][0])
		fmt.Println("累计", string(txString[qi:qi+nnn]), "流动2币名")
		qi += nnn //a
		qi += 2   //多18,19
		nnn = int(txString[qi-1 : qi][0])
		fmt.Println("累计", string(txString[qi:qi+nnn]), "流动2数量")
		qi += nnn //a
	} else if sanCeng != qi {
		fmt.Println("异常整理")
	}

	//可能有Memo备注
	if yiCeng > qi+2 { //至少多个10,2
		qi += 2 //多18,20,
		nnn = int(txString[qi-1 : qi][0])
		fmt.Println("累计", string(txString[qi:qi+nnn]), "Memo备注结束")
		qi += nnn //a
	} else if yiCeng != qi {
		fmt.Println("异常整理")
	}
	//fmt.Println("一层", yiCeng, qi)
	qi += 2 //18,101,
	qi += 2 //10,80,
	zong := int(txString[qi-1 : qi][0])
	qi += 2 //10,70,
	qi += 2 //10,31,
	zong -= 4
	nnn = int(txString[qi-1 : qi][0]) ///cosmos.crypto.secp256k1.PubKey
	fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	qi += nnn //a
	zong -= nnn
	qi += 2 //18,35,
	qi += 2 //10,33,
	zong -= 4
	nnn = int(txString[qi-1 : qi][0]) //乱码
	//fmt.Println("累计", string(txString[qi:qi+nnn]), "乱码")
	qi += nnn //a
	zong -= nnn
	qi += 2 //18,4,
	qi += 2 //10,2,
	zong -= 4
	//fmt.Println("累计", string(txString[qi:qi+2]), "乱码")
	qi += 2 //a
	zong -= 2
	qi += zong //24,2,改正
	qi += 2    //18,17,
	//---------------分割
	qi += 2                           //10,11,
	qi += 2                           //10,3,
	nnn = int(txString[qi-1 : qi][0]) //uom
	fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	qi += nnn                         //a
	qi += 2                           //18,4,
	nnn = int(txString[qi-1 : qi][0]) //[5514]
	fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	qi += nnn                         //a
	qi += 2                           //16,183,
	qi += 2                           //133,28,
	qi += 2                           //26,64,
	nnn = int(txString[qi-1 : qi][0]) //乱码
	//fmt.Println("累计", string(txString[qi:qi+nnn]), "结束")
	qi += nnn //a
	if qi == len(txString) {
		//ShuChu(txString)
		fmt.Println("正确解析")
		return "正确解析"
	} else {
		ShuChu(txString)
		fmt.Println("错误解析")
		return "错误解析"
	}
}

func ShuChu(txString []byte) string {
	lin := "[]byte{"
	i := 0
	for _, lin_byte := range txString {
		i += 1
		if i == len(txString) {
			lin += fmt.Sprintf("%d", lin_byte) + "}"
		} else {
			lin += fmt.Sprintf("%d", lin_byte) + ","
		}

	}
	fmt.Println("总数据", lin)
	return lin
}

func PanDuanAstro2(txString []byte) (bool, string, string, string, string) {
	ShuChu(txString)
	FenJie(txString)
	if bytes.Contains(txString, ChiZi) == true {
		//128*x+n

		if string(txString[96:161]) == "mantra1466nf3zuxpya8q9emxukd7vftaf6h4psr0a07srl5zw74zh84yjqagspfm" {

			//fmt.Println("找到", string(txString[8:8+36]))

			//fmt.Println("原始", txString[qi:qi+10], "结束")

			//ASTRO换其他币 1000astro换141.73
			n := bytes.Index(txString, []byte("{\"swap\":{"))
			if n > 161+1 {
				nn := bytes.Index(txString[n+9:], []byte("}}"))
				if nn > 0 {
					bianyi := txString[n+9 : n+9+nn]
					fmt.Println(string(bianyi))
					if len(bianyi) > 50 {
						swapBytes := bianyi
						if bytes.Contains(swapBytes, ByteUsdcUom) {
							n = bytes.Index(txString, []byte("\"amount\":\""))
							if n > 165 {
								nn = bytes.Index(txString[n+10:], []byte("\","))
								if nn > 0 {
									amount := txString[n+10 : n+10+nn]
									if len(amount) >= 6 {
										//fmt.Println("新版astro识别", "usdc-luna astro数量", string(amount))
										return true, string(amount), "", "", ""
									}
								}
							}
							fmt.Println("A识别", "异常解码", string(swapBytes), string(txString))
						}
						if bytes.Contains(swapBytes, ByteUomUsdc) {

							n = bytes.Index(txString[nn+2:], []byte("uom"))
							if n > nn+2 {
								nn = bytes.Index(txString[n+10:], []byte("\","))
								if nn > 0 {
									amount := txString[n+10 : n+10+nn]
									if len(amount) >= 6 {
										//fmt.Println("新版astro识别", "luna-usdc astro数量", string(amount))
										return true, "", string(amount), "", ""
									}
								}
							}
							fmt.Println("B识别", "异常解码", string(swapBytes), string(txString))

						}
					}
				}
			}
		} else { //合约非mantra1466nf3zuxpya8q9emxukd7vftaf6h4psr0a07srl5zw74zh84yjqagspfm
			//其他池子
			if bytes.Contains(txString, ByteUluna) == false || bytes.Contains(txString, ByteUusdc) == false {
				return false, "", "", "", ""
			}
		}
	}
	//没有msg内消息 直接判断 funds
	if len(txString) >= 212 { // && len(lin_tx) <= 526
		weizhi := int(txString[2])*129 + int(txString[1]) - 127 + 3 //比如453 10 190 3  3*129+190-127=450 +3前置

		txBytesA := txString[weizhi-33 : weizhi]
		n := bytes.Index(txBytesA, tUluna)
		if n >= 2 && txBytesA[n-2 : n-1][0] == 42 && txBytesA[n-3 : n-2][0] == 125 {
			nn := int(txBytesA[n+8 : n+9][0]) //交易数量长度
			return true, "", "", string(txBytesA[n+9 : n+9+nn]), ""
		} else {
			txBytesA = txString[weizhi-96 : weizhi]
			n = bytes.Index(txBytesA, tUusdc) //42, 79, 10, (68)
			if n >= 2 && txBytesA[n-2 : n-1][0] == 42 && txBytesA[n-3 : n-2][0] == 125 {
				nn := int(txBytesA[n+71 : n+72][0]) //交易数量长度
				return true, "", "", "", string(txBytesA[n+72 : n+72+nn])
			}
		}
	}

	return false, "", "", "", ""
}

func TestNilCustomHTTPClient(t *testing.T) {
	require.Panics(t, func() {
		_, _ = rpchttp.NewWithClient("http://example.com", "/websocket", nil)
	})
	require.Panics(t, func() {
		_, _ = rpcclient.NewWithHTTPClient("http://example.com", nil)
	})
}

func TestCustomHTTPClient(t *testing.T) {
	remote := rpctest.GetConfig().RPC.ListenAddress
	c, err := rpchttp.NewWithClient(remote, "/websocket", http.DefaultClient)
	require.Nil(t, err)
	status, err := c.Status(context.Background())
	require.NoError(t, err)
	require.NotNil(t, status)
}

func TestCorsEnabled(t *testing.T) {
	origin := rpctest.GetConfig().RPC.CORSAllowedOrigins[0]
	remote := strings.ReplaceAll(rpctest.GetConfig().RPC.ListenAddress, "tcp", "http")

	req, err := http.NewRequest("GET", remote, nil)
	require.Nil(t, err, "%+v", err)
	req.Header.Set("Origin", origin)
	c := &http.Client{}
	resp, err := c.Do(req)
	require.Nil(t, err, "%+v", err)
	defer resp.Body.Close()

	assert.Equal(t, resp.Header.Get("Access-Control-Allow-Origin"), origin)
}

// Make sure status is correct (we connect properly)
func TestStatus(t *testing.T) {
	for i, c := range GetClients() {
		moniker := rpctest.GetConfig().Moniker
		status, err := c.Status(context.Background())
		require.Nil(t, err, "%d: %+v", i, err)
		assert.Equal(t, moniker, status.NodeInfo.Moniker)
	}
}

// Make sure info is correct (we connect properly)
func TestInfo(t *testing.T) {
	for i, c := range GetClients() {
		// status, err := c.Status()
		// require.Nil(t, err, "%+v", err)
		info, err := c.ABCIInfo(context.Background())
		require.Nil(t, err, "%d: %+v", i, err)
		// TODO: this is not correct - fix merkleeyes!
		// assert.EqualValues(t, status.SyncInfo.LatestBlockHeight, info.Response.LastBlockHeight)
		assert.True(t, strings.Contains(info.Response.Data, "size"))
	}
}

func TestNetInfo(t *testing.T) {
	for i, c := range GetClients() {
		nc, ok := c.(client.NetworkClient)
		require.True(t, ok, "%d", i)
		netinfo, err := nc.NetInfo(context.Background())
		require.Nil(t, err, "%d: %+v", i, err)
		assert.True(t, netinfo.Listening)
		assert.Equal(t, 0, len(netinfo.Peers))
	}
}

func TestDumpConsensusState(t *testing.T) {
	for i, c := range GetClients() {
		// FIXME: fix server so it doesn't panic on invalid input
		nc, ok := c.(client.NetworkClient)
		require.True(t, ok, "%d", i)
		cons, err := nc.DumpConsensusState(context.Background())
		require.Nil(t, err, "%d: %+v", i, err)
		assert.NotEmpty(t, cons.RoundState)
		assert.Empty(t, cons.Peers)
	}
}

func TestConsensusState(t *testing.T) {
	for i, c := range GetClients() {
		// FIXME: fix server so it doesn't panic on invalid input
		nc, ok := c.(client.NetworkClient)
		require.True(t, ok, "%d", i)
		cons, err := nc.ConsensusState(context.Background())
		require.Nil(t, err, "%d: %+v", i, err)
		assert.NotEmpty(t, cons.RoundState)
	}
}

func TestHealth(t *testing.T) {
	for i, c := range GetClients() {
		nc, ok := c.(client.NetworkClient)
		require.True(t, ok, "%d", i)
		_, err := nc.Health(context.Background())
		require.Nil(t, err, "%d: %+v", i, err)
	}
}

func TestGenesisAndValidators(t *testing.T) {
	for i, c := range GetClients() {

		// make sure this is the right genesis file
		gen, err := c.Genesis(context.Background())
		require.Nil(t, err, "%d: %+v", i, err)
		// get the genesis validator
		require.Equal(t, 1, len(gen.Genesis.Validators))
		gval := gen.Genesis.Validators[0]

		// get the current validators
		h := int64(1)
		vals, err := c.Validators(context.Background(), &h, nil, nil)
		require.Nil(t, err, "%d: %+v", i, err)
		require.Equal(t, 1, len(vals.Validators))
		require.Equal(t, 1, vals.Count)
		require.Equal(t, 1, vals.Total)
		val := vals.Validators[0]

		// make sure the current set is also the genesis set
		assert.Equal(t, gval.Power, val.VotingPower)
		assert.Equal(t, gval.PubKey, val.PubKey)
	}
}

func TestGenesisChunked(t *testing.T) {
	lin := "www333"
	swapBytes, err := base64.StdEncoding.DecodeString(lin)
	if err != nil {
		fmt.Println(swapBytes)
	}
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	for _, c := range GetClients() {
		first, err := c.GenesisChunked(ctx, 0)
		require.NoError(t, err)

		decoded := make([]string, 0, first.TotalChunks)
		for i := 0; i < first.TotalChunks; i++ {
			chunk, err := c.GenesisChunked(ctx, uint(i))
			require.NoError(t, err)
			data, err := base64.StdEncoding.DecodeString(chunk.Data)
			require.NoError(t, err)
			decoded = append(decoded, string(data))

		}
		doc := []byte(strings.Join(decoded, ""))

		var out types.GenesisDoc
		require.NoError(t, cmtjson.Unmarshal(doc, &out),
			"first: %+v, doc: %s", first, string(doc))
	}
}

func TestABCIQuery(t *testing.T) {
	for i, c := range GetClients() {
		// write something
		k, v, tx := MakeTxKV()
		bres, err := c.BroadcastTxCommit(context.Background(), tx)
		require.Nil(t, err, "%d: %+v", i, err)
		apph := bres.Height + 1 // this is where the tx will be applied to the state

		// wait before querying
		err = client.WaitForHeight(c, apph, nil)
		require.NoError(t, err)
		res, err := c.ABCIQuery(context.Background(), "/key", k)
		qres := res.Response
		if assert.Nil(t, err) && assert.True(t, qres.IsOK()) {
			assert.EqualValues(t, v, qres.Value)
		}
	}
}

// Make some app checks
func TestAppCalls(t *testing.T) {
	assert, require := assert.New(t), require.New(t)
	for i, c := range GetClients() {

		// get an offset of height to avoid racing and guessing
		s, err := c.Status(context.Background())
		require.NoError(err)
		// sh is start height or status height
		sh := s.SyncInfo.LatestBlockHeight

		// look for the future
		h := sh + 20
		_, err = c.Block(context.Background(), &h)
		require.Error(err) // no block yet

		// write something
		k, v, tx := MakeTxKV()
		bres, err := c.BroadcastTxCommit(context.Background(), tx)
		require.NoError(err)
		require.True(bres.TxResult.IsOK())
		txh := bres.Height
		apph := txh + 1 // this is where the tx will be applied to the state

		// wait before querying
		err = client.WaitForHeight(c, apph, nil)
		require.NoError(err)

		_qres, err := c.ABCIQueryWithOptions(context.Background(), "/key", k, client.ABCIQueryOptions{Prove: false})
		require.NoError(err)
		qres := _qres.Response
		if assert.True(qres.IsOK()) {
			assert.Equal(k, qres.Key)
			assert.EqualValues(v, qres.Value)
		}

		// make sure we can lookup the tx with proof
		ptx, err := c.Tx(context.Background(), bres.Hash, true)
		require.NoError(err)
		assert.EqualValues(txh, ptx.Height)
		assert.EqualValues(tx, ptx.Tx)

		// and we can even check the block is added
		block, err := c.Block(context.Background(), &apph)
		require.NoError(err)
		appHash := block.Block.Header.AppHash
		assert.True(len(appHash) > 0)
		assert.EqualValues(apph, block.Block.Header.Height)

		blockByHash, err := c.BlockByHash(context.Background(), block.BlockID.Hash)
		require.NoError(err)
		require.Equal(block, blockByHash)

		// check that the header matches the block hash
		header, err := c.Header(context.Background(), &apph)
		require.NoError(err)
		require.Equal(block.Block.Header, *header.Header)

		headerByHash, err := c.HeaderByHash(context.Background(), block.BlockID.Hash)
		require.NoError(err)
		require.Equal(header, headerByHash)

		// now check the results
		blockResults, err := c.BlockResults(context.Background(), &txh)
		require.Nil(err, "%d: %+v", i, err)
		assert.Equal(txh, blockResults.Height)
		if assert.Equal(1, len(blockResults.TxsResults)) {
			// check success code
			assert.EqualValues(0, blockResults.TxsResults[0].Code)
		}

		// check blockchain info, now that we know there is info
		info, err := c.BlockchainInfo(context.Background(), apph, apph)
		require.NoError(err)
		assert.True(info.LastHeight >= apph)
		if assert.Equal(1, len(info.BlockMetas)) {
			lastMeta := info.BlockMetas[0]
			assert.EqualValues(apph, lastMeta.Header.Height)
			blockData := block.Block
			assert.Equal(blockData.Header.AppHash, lastMeta.Header.AppHash)
			assert.Equal(block.BlockID, lastMeta.BlockID)
		}

		// and get the corresponding commit with the same apphash
		commit, err := c.Commit(context.Background(), &apph)
		require.NoError(err)
		cappHash := commit.Header.AppHash
		assert.Equal(appHash, cappHash)
		assert.NotNil(commit.Commit)

		// compare the commits (note Commit(2) has commit from Block(3))
		h = apph - 1
		commit2, err := c.Commit(context.Background(), &h)
		require.NoError(err)
		assert.Equal(block.Block.LastCommitHash, commit2.Commit.Hash())

		// and we got a proof that works!
		_pres, err := c.ABCIQueryWithOptions(context.Background(), "/key", k, client.ABCIQueryOptions{Prove: true})
		require.NoError(err)
		pres := _pres.Response
		assert.True(pres.IsOK())

		// XXX Test proof
	}
}

func TestBroadcastTxSync(t *testing.T) {
	require := require.New(t)

	// TODO (melekes): use mempool which is set on RPC rather than getting it from node
	mempool := node.Mempool()
	initMempoolSize := mempool.Size()

	for i, c := range GetClients() {
		_, _, tx := MakeTxKV()
		bres, err := c.BroadcastTxSync(context.Background(), tx)
		require.Nil(err, "%d: %+v", i, err)
		require.Equal(bres.Code, abci.CodeTypeOK) // FIXME

		require.Equal(initMempoolSize+1, mempool.Size())

		txs := mempool.ReapMaxTxs(len(tx))
		require.EqualValues(tx, txs[0])
		mempool.Flush()
	}
}

func TestBroadcastTxCommit(t *testing.T) {
	require := require.New(t)

	mempool := node.Mempool()
	for i, c := range GetClients() {
		_, _, tx := MakeTxKV()
		bres, err := c.BroadcastTxCommit(context.Background(), tx)
		require.Nil(err, "%d: %+v", i, err)
		require.True(bres.CheckTx.IsOK())
		require.True(bres.TxResult.IsOK())

		require.Equal(0, mempool.Size())
	}
}

func TestUnconfirmedTxs(t *testing.T) {
	_, _, tx := MakeTxKV()

	ch := make(chan *abci.ResponseCheckTx, 1)
	mempool := node.Mempool()
	err := mempool.CheckTx(tx, func(resp *abci.ResponseCheckTx) { ch <- resp }, mempl.TxInfo{})
	require.NoError(t, err)

	// wait for tx to arrive in mempoool.
	select {
	case <-ch:
	case <-time.After(5 * time.Second):
		t.Error("Timed out waiting for CheckTx callback")
	}

	for _, c := range GetClients() {
		mc := c.(client.MempoolClient)
		limit := 1
		res, err := mc.UnconfirmedTxs(context.Background(), &limit)
		require.NoError(t, err)

		assert.Equal(t, 1, res.Count)
		assert.Equal(t, 1, res.Total)
		assert.Equal(t, mempool.SizeBytes(), res.TotalBytes)
		assert.Exactly(t, types.Txs{tx}, types.Txs(res.Txs))
	}

	mempool.Flush()
}

func TestNumUnconfirmedTxs(t *testing.T) {
	_, _, tx := MakeTxKV()

	ch := make(chan *abci.ResponseCheckTx, 1)
	mempool := node.Mempool()
	err := mempool.CheckTx(tx, func(resp *abci.ResponseCheckTx) { ch <- resp }, mempl.TxInfo{})
	require.NoError(t, err)

	// wait for tx to arrive in mempoool.
	select {
	case <-ch:
	case <-time.After(5 * time.Second):
		t.Error("Timed out waiting for CheckTx callback")
	}

	mempoolSize := mempool.Size()
	for i, c := range GetClients() {
		mc, ok := c.(client.MempoolClient)
		require.True(t, ok, "%d", i)
		res, err := mc.NumUnconfirmedTxs(context.Background())
		require.Nil(t, err, "%d: %+v", i, err)

		assert.Equal(t, mempoolSize, res.Count)
		assert.Equal(t, mempoolSize, res.Total)
		assert.Equal(t, mempool.SizeBytes(), res.TotalBytes)
	}

	mempool.Flush()
}

func TestCheckTx(t *testing.T) {
	mempool := node.Mempool()

	for _, c := range GetClients() {
		_, _, tx := MakeTxKV()

		res, err := c.CheckTx(context.Background(), tx)
		require.NoError(t, err)
		assert.Equal(t, abci.CodeTypeOK, res.Code)

		assert.Equal(t, 0, mempool.Size(), "mempool must be empty")
	}
}

func TestTx(t *testing.T) {
	// first we broadcast a tx
	c := getHTTPClient()
	_, _, tx := MakeTxKV()
	bres, err := c.BroadcastTxCommit(context.Background(), tx)
	require.Nil(t, err, "%+v", err)

	txHeight := bres.Height
	txHash := bres.Hash

	anotherTxHash := types.Tx("a different tx").Hash()

	cases := []struct {
		valid bool
		prove bool
		hash  []byte
	}{
		// only valid if correct hash provided
		{true, false, txHash},
		{true, true, txHash},
		{false, false, anotherTxHash},
		{false, true, anotherTxHash},
		{false, false, nil},
		{false, true, nil},
	}

	for i, c := range GetClients() {
		for j, tc := range cases {
			t.Logf("client %d, case %d", i, j)

			// now we query for the tx.
			// since there's only one tx, we know index=0.
			ptx, err := c.Tx(context.Background(), tc.hash, tc.prove)

			if !tc.valid {
				require.NotNil(t, err)
			} else {
				require.Nil(t, err, "%+v", err)
				assert.EqualValues(t, txHeight, ptx.Height)
				assert.EqualValues(t, tx, ptx.Tx)
				assert.Zero(t, ptx.Index)
				assert.True(t, ptx.TxResult.IsOK())
				assert.EqualValues(t, txHash, ptx.Hash)

				// time to verify the proof
				proof := ptx.Proof
				if tc.prove && assert.EqualValues(t, tx, proof.Data) {
					assert.NoError(t, proof.Proof.Verify(proof.RootHash, txHash))
				}
			}
		}
	}
}

func TestTxSearchWithTimeout(t *testing.T) {
	// Get a client with a time-out of 10 secs.
	timeoutClient := getHTTPClientWithTimeout(10)

	_, _, tx := MakeTxKV()
	_, err := timeoutClient.BroadcastTxCommit(context.Background(), tx)
	require.NoError(t, err)

	// query using a compositeKey (see kvstore application)
	result, err := timeoutClient.TxSearch(context.Background(), "app.creator='Cosmoshi Netowoko'", false, nil, nil, "asc")
	require.Nil(t, err)
	require.Greater(t, len(result.Txs), 0, "expected a lot of transactions")
}

// This test does nothing if we do not call app.SetGenBlockEvents() within main_test.go
// It will nevertheless pass as there are no events being generated.
func TestBlockSearch(t *testing.T) {
	c := getHTTPClient()

	// first we broadcast a few txs
	for i := 0; i < 10; i++ {
		_, _, tx := MakeTxKV()

		_, err := c.BroadcastTxCommit(context.Background(), tx)
		require.NoError(t, err)
	}
	require.NoError(t, client.WaitForHeight(c, 5, nil))
	result, err := c.BlockSearch(context.Background(), "begin_event.foo = 100", nil, nil, "asc")
	require.NoError(t, err)
	blockCount := len(result.Blocks)
	// if we generate block events within the test (by uncommenting
	// the code in line main_test.go:L23) then we expect len(result.Blocks)
	// to be at least 5
	// require.GreaterOrEqual(t, blockCount, 5)

	// otherwise it is 0
	require.Equal(t, blockCount, 0)

}
func TestTxSearch(t *testing.T) {
	c := getHTTPClient()

	// first we broadcast a few txs
	for i := 0; i < 10; i++ {
		_, _, tx := MakeTxKV()
		_, err := c.BroadcastTxCommit(context.Background(), tx)
		require.NoError(t, err)
	}

	// since we're not using an isolated test server, we'll have lingering transactions
	// from other tests as well
	result, err := c.TxSearch(context.Background(), "tx.height >= 0", true, nil, nil, "asc")
	require.NoError(t, err)
	txCount := len(result.Txs)

	// pick out the last tx to have something to search for in tests
	find := result.Txs[len(result.Txs)-1]
	anotherTxHash := types.Tx("a different tx").Hash()

	for _, c := range GetClients() {

		// now we query for the tx.
		result, err := c.TxSearch(context.Background(), fmt.Sprintf("tx.hash='%v'", find.Hash), true, nil, nil, "asc")
		require.Nil(t, err)
		require.Len(t, result.Txs, 1)
		require.Equal(t, find.Hash, result.Txs[0].Hash)

		ptx := result.Txs[0]
		assert.EqualValues(t, find.Height, ptx.Height)
		assert.EqualValues(t, find.Tx, ptx.Tx)
		assert.Zero(t, ptx.Index)
		assert.True(t, ptx.TxResult.IsOK())
		assert.EqualValues(t, find.Hash, ptx.Hash)

		// time to verify the proof
		if assert.EqualValues(t, find.Tx, ptx.Proof.Data) {
			assert.NoError(t, ptx.Proof.Proof.Verify(ptx.Proof.RootHash, find.Hash))
		}

		// query by height
		result, err = c.TxSearch(context.Background(), fmt.Sprintf("tx.height=%d", find.Height), true, nil, nil, "asc")
		require.Nil(t, err)
		require.Len(t, result.Txs, 1)

		// query for non existing tx
		result, err = c.TxSearch(context.Background(), fmt.Sprintf("tx.hash='%X'", anotherTxHash), false, nil, nil, "asc")
		require.Nil(t, err)
		require.Len(t, result.Txs, 0)

		// query using a compositeKey (see kvstore application)
		result, err = c.TxSearch(context.Background(), "app.creator='Cosmoshi Netowoko'", false, nil, nil, "asc")
		require.Nil(t, err)
		require.Greater(t, len(result.Txs), 0, "expected a lot of transactions")

		// query using an index key
		result, err = c.TxSearch(context.Background(), "app.index_key='index is working'", false, nil, nil, "asc")
		require.Nil(t, err)
		require.Greater(t, len(result.Txs), 0, "expected a lot of transactions")

		// query using an noindex key
		result, err = c.TxSearch(context.Background(), "app.noindex_key='index is working'", false, nil, nil, "asc")
		require.Nil(t, err)
		require.Equal(t, len(result.Txs), 0, "expected a lot of transactions")

		// query using a compositeKey (see kvstore application) and height
		result, err = c.TxSearch(context.Background(),
			"app.creator='Cosmoshi Netowoko' AND tx.height<10000", true, nil, nil, "asc")
		require.Nil(t, err)
		require.Greater(t, len(result.Txs), 0, "expected a lot of transactions")

		// query a non existing tx with page 1 and txsPerPage 1
		perPage := 1
		result, err = c.TxSearch(context.Background(), "app.creator='Cosmoshi Neetowoko'", true, nil, &perPage, "asc")
		require.Nil(t, err)
		require.Len(t, result.Txs, 0)

		// check sorting
		result, err = c.TxSearch(context.Background(), "tx.height >= 1", false, nil, nil, "asc")
		require.Nil(t, err)
		for k := 0; k < len(result.Txs)-1; k++ {
			require.LessOrEqual(t, result.Txs[k].Height, result.Txs[k+1].Height)
			require.LessOrEqual(t, result.Txs[k].Index, result.Txs[k+1].Index)
		}

		result, err = c.TxSearch(context.Background(), "tx.height >= 1", false, nil, nil, "desc")
		require.Nil(t, err)
		for k := 0; k < len(result.Txs)-1; k++ {
			require.GreaterOrEqual(t, result.Txs[k].Height, result.Txs[k+1].Height)
			require.GreaterOrEqual(t, result.Txs[k].Index, result.Txs[k+1].Index)
		}
		// check pagination
		perPage = 3
		var (
			seen      = map[int64]bool{}
			maxHeight int64
			pages     = int(math.Ceil(float64(txCount) / float64(perPage)))
		)

		totalTx := 0
		for page := 1; page <= pages; page++ {
			page := page
			result, err := c.TxSearch(context.Background(), "tx.height >= 1", true, &page, &perPage, "asc")
			require.NoError(t, err)
			if page < pages {
				require.Len(t, result.Txs, perPage)
			} else {
				require.LessOrEqual(t, len(result.Txs), perPage)
			}
			totalTx = totalTx + len(result.Txs)
			for _, tx := range result.Txs {
				require.False(t, seen[tx.Height],
					"Found duplicate height %v in page %v", tx.Height, page)
				require.Greater(t, tx.Height, maxHeight,
					"Found decreasing height %v (max seen %v) in page %v", tx.Height, maxHeight, page)
				seen[tx.Height] = true
				maxHeight = tx.Height
			}
		}
		require.Equal(t, txCount, totalTx)
		require.Len(t, seen, txCount)
	}
}

func TestBatchedJSONRPCCalls(t *testing.T) {
	c := getHTTPClient()
	testBatchedJSONRPCCalls(t, c)
}

func testBatchedJSONRPCCalls(t *testing.T, c *rpchttp.HTTP) {
	k1, v1, tx1 := MakeTxKV()
	k2, v2, tx2 := MakeTxKV()

	batch := c.NewBatch()
	r1, err := batch.BroadcastTxCommit(context.Background(), tx1)
	require.NoError(t, err)
	r2, err := batch.BroadcastTxCommit(context.Background(), tx2)
	require.NoError(t, err)
	require.Equal(t, 2, batch.Count())
	bresults, err := batch.Send(ctx)
	require.NoError(t, err)
	require.Len(t, bresults, 2)
	require.Equal(t, 0, batch.Count())

	bresult1, ok := bresults[0].(*ctypes.ResultBroadcastTxCommit)
	require.True(t, ok)
	require.Equal(t, *bresult1, *r1)
	bresult2, ok := bresults[1].(*ctypes.ResultBroadcastTxCommit)
	require.True(t, ok)
	require.Equal(t, *bresult2, *r2)
	apph := cmtmath.MaxInt64(bresult1.Height, bresult2.Height) + 1

	err = client.WaitForHeight(c, apph, nil)
	require.NoError(t, err)

	q1, err := batch.ABCIQuery(context.Background(), "/key", k1)
	require.NoError(t, err)
	q2, err := batch.ABCIQuery(context.Background(), "/key", k2)
	require.NoError(t, err)
	require.Equal(t, 2, batch.Count())
	qresults, err := batch.Send(ctx)
	require.NoError(t, err)
	require.Len(t, qresults, 2)
	require.Equal(t, 0, batch.Count())

	qresult1, ok := qresults[0].(*ctypes.ResultABCIQuery)
	require.True(t, ok)
	require.Equal(t, *qresult1, *q1)
	qresult2, ok := qresults[1].(*ctypes.ResultABCIQuery)
	require.True(t, ok)
	require.Equal(t, *qresult2, *q2)

	require.Equal(t, qresult1.Response.Key, k1)
	require.Equal(t, qresult2.Response.Key, k2)
	require.Equal(t, qresult1.Response.Value, v1)
	require.Equal(t, qresult2.Response.Value, v2)
}

func TestBatchedJSONRPCCallsCancellation(t *testing.T) {
	c := getHTTPClient()
	_, _, tx1 := MakeTxKV()
	_, _, tx2 := MakeTxKV()

	batch := c.NewBatch()
	_, err := batch.BroadcastTxCommit(context.Background(), tx1)
	require.NoError(t, err)
	_, err = batch.BroadcastTxCommit(context.Background(), tx2)
	require.NoError(t, err)
	// we should have 2 requests waiting
	require.Equal(t, 2, batch.Count())
	// we want to make sure we cleared 2 pending requests
	require.Equal(t, 2, batch.Clear())
	// now there should be no batched requests
	require.Equal(t, 0, batch.Count())
}

func TestSendingEmptyRequestBatch(t *testing.T) {
	c := getHTTPClient()
	batch := c.NewBatch()
	_, err := batch.Send(ctx)
	require.Error(t, err, "sending an empty batch of JSON RPC requests should result in an error")
}

func TestClearingEmptyRequestBatch(t *testing.T) {
	c := getHTTPClient()
	batch := c.NewBatch()
	require.Zero(t, batch.Clear(), "clearing an empty batch of JSON RPC requests should result in a 0 result")
}

func TestConcurrentJSONRPCBatching(t *testing.T) {
	var wg sync.WaitGroup
	c := getHTTPClient()
	for i := 0; i < 50; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			testBatchedJSONRPCCalls(t, c)
		}()
	}
	wg.Wait()
}
